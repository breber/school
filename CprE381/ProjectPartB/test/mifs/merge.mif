DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

CONTENT
BEGIN

0: 00100000000100000000000000000100;
1: 10001100000100010000000000000000;
2: 00000000000100011001000010000000;
3: 00000000000000000010000000100000;
4: 00000000000100010010100000100000;
5: 00000011101100101110100000100010;
6: 00100011101111011111111111111100;
7: 00000011101000001001100000100000;
8: 00001100000000000000000000001010;
9: 00001000000000000000000001010110;
10: 00000000101001000100000000100010;
11: 00101001000010010000000000000010;
12: 00010001001000000000000000000001;
13: 00000011111000000000000000001000;
14: 00100011101111011111111111110000;
15: 10101111101111110000000000000000;
16: 10101111101001001111111111111100;
17: 10101111101001011111111111111000;
18: 00000000000010000100100001000010;
19: 00000000100010010010100000100000;
20: 10101111101001011111111111110100;
21: 00001100000000000000000000001010;
22: 10001111101001001111111111110100;
23: 10001111101001011111111111111000;
24: 00001100000000000000000000001010;
25: 10001111101111110000000000000000;
26: 10001111101010001111111111111100;
27: 10001111101010011111111111111000;
28: 00000001001010000101000000100010;
29: 00000000000010100101000001000010;
30: 00000001000010100101000000100000;
31: 00000000000010000100000010000000;
32: 00000000000010010100100010000000;
33: 00000000000010100101000010000000;
34: 00000000000010000101100000100000;
35: 00000000000010000110000000100000;
36: 00000000000010100110100000100000;
37: 00000001100010101100000000101010;
38: 00000001101010011100100000101010;
39: 00000011000110011100000000100101;
40: 00010011000000000000000000100010;
41: 00010101101010010000000000000111;
42: 00000010000011000111000000100000;
43: 10001101110110000000000000000000;
44: 00100001100011000000000000000100;
45: 00000010011010110111100000100000;
46: 10101101111110000000000000000000;
47: 00100001011010110000000000000100;
48: 00001000000000000000000000100101;
49: 00010101100010100000000000000111;
50: 00000010000011010111000000100000;
51: 10001101110110000000000000000000;
52: 00100001101011010000000000000100;
53: 00000010011010110111100000100000;
54: 10101101111110000000000000000000;
55: 00100001011010110000000000000100;
56: 00001000000000000000000000100101;
57: 00000010000011000111000000100000;
58: 10001101110110000000000000000000;
59: 00000010000011010111100000100000;
60: 10001101111110010000000000000000;
61: 00000011000110010000100000101010;
62: 00010000001000000000000000000101;
63: 00100001100011000000000000000100;
64: 00000010011010110111100000100000;
65: 10101101111110000000000000000000;
66: 00100001011010110000000000000100;
67: 00001000000000000000000000100101;
68: 00000010000011010111100000100000;
69: 10001101111110010000000000000000;
70: 00100001101011010000000000000100;
71: 00000010011010110111100000100000;
72: 10101101111110010000000000000000;
73: 00100001011010110000000000000100;
74: 00001000000000000000000000100101;
75: 00000000000010000101100000100000;
76: 00000001011010010000100000101010;
77: 00010000001000000000000000000110;
78: 00000010011010110111000000100000;
79: 10001101110110000000000000000000;
80: 00000010000010110111100000100000;
81: 10101101111110000000000000000000;
82: 00100001011010110000000000000100;
83: 00001000000000000000000001001100;
84: 00100011101111010000000000010000;
85: 00000011111000000000000000001000;



[86..1023] : 00000000000000000000000000000000; 			

END;
