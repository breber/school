DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

CONTENT
BEGIN

0 : 00110100000100000000000000000000;
1 : 10000010000010000000000000000010;
2 : 00111100000010010000000000000011;
3 : 00110101001010010010010000111111;
4 : 00100100000010100000000101101100;
5 : 01110001000010010100000000000010;
6 : 00000000000010000100010000000011;
7 : 01110001000010100100000000000010;
8 : 00100100000010010000000000000000;
9 : 00100100000010110000000000001000;
10 : 00100100000100010000000000000000;
11 : 00000001000000001001000000100000;
12 : 10001110000011000000000000000100;
13 : 00000001000000000100100000100000;
14 : 00000000000010000100101000000011;
15 : 01110001001011000100100000000010;
16 : 00000000000010010100101000000011;
17 : 00000000000010000100001000000011;
18 : 01110010010010000100000000000010;
19 : 00000000000010000100001000000011;
20 : 00000001001100011000100000100000;
21 : 00100010000100000000000000000100;
22 : 00100001011010111111111111111111;
23 : 00010101011000001111111111110100;
24 : 10101110000100010000000000000000;
25 : 00001000000000000000000000011001;



[26..1023] : 00000000000000000000000000000000; 			

END;
