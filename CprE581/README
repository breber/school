Readme

The purpose of this application is to process a PPM (P3) image and perform an
operation on the image (in this case lightening each pixel). There will be
several implementations, and the goal is to see how each implementation performs
in terms of processor/memory/cache performance.

Below is a list of each implementation:

1. Contiguous memory storage (row order)
    * Load image into contiguous block of memory
    * Process the image in memory order (row order)
    * Write out the image
2. Contiguous memory storage (column order)
    * Load image into contiguous block of memory
    * Process the image in less ideal order (column order)
    * Write out the image
3. Pipeline Process (process and write pixel by pixel instead of reading in whole image first)
    * Read pixel from file
    * Process the pixel
    * Write out the pixel
4. Contiguous memory storage (row order, using smaller data types)
    * Load image into contiguous block of memory (each pixel color stored as 8-bit int)
    * Process the image in row/memory order
    * Write out the image
5. 2D storage (as opposed to single contiguous block) (row order)
    * Load image into memory, stored row by row
    * Process the image in row order
    * Write out the image
6. 2D storage (as opposed to single contiguous block) (column order)
    * Load image into memory, stored row by row
    * Process the image in column order
    * Write out the image
7. Linked list storage (as opposed to single contiguous block)
    * Load image into memory, stored as a linked list of pixels
    * Process the image in list order
    * Write out the image
